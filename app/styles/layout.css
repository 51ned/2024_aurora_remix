/*  
  This CSS module defines the layout of the elements on the page.
  Nothing the more, but nothing the less.
  I chose a strictly defined CSS grid in order to use subgrid.
  Subgrid allows me to write cleaner HTML markup, avoiding unnecessary wrapping of elements.
**/


body {
  display: grid;
  grid-template-columns: 
    [fullbleed-start] 0
    [leftbar-start] 150px /* !!! */
    [leftbar-end content-start] 1fr
    [content-end rightbar-start] 56px /* !!! */
    [rightbar-end] 0 [fullbleed-end];
  grid-template-rows:
    [nav] min-content
    [header] min-content
    [main] 1fr
    [footer] min-content
    [aside] min-content;
  max-width: 1920px;
  min-height: 100vh;

  @media (max-width: 1280px) {
    grid-template-columns: 
      [fullbleed-start] 0
      [content-start] 1fr
      [content-end rightbar-start] 56px /* !!! */
      [rightbar-end] 0 [fullbleed-end];
  }

  @media (max-width: 960px) {
    grid-template-columns: 
      [fullbleed-start] 0
      [content-start] 1fr
      [content-end] 0 [fullbleed-end];
  }
}

header, main, footer {
  display: grid;
  grid-column: fullbleed;
  grid-template-columns: subgrid;
}

header { grid-row: header; }
main { grid-row: main; }
footer { grid-row: footer; }

nav, aside {
  grid-row: header / footer;
  height: 100vh;
  position: sticky;
  top: 0;
}

nav {
  grid-column: leftbar;

  @media (max-width: 1280px) {
    grid-column: fullbleed;
    grid-row: nav;
    height: auto;
  }
}

aside {
  grid-column: rightbar;

  @media (max-width: 960px) {
    bottom: 0;
    grid-column: fullbleed;
    grid-row: aside;
    height: auto;
    top: unset;
  }
}
